/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.my.process;
import java.math.BigDecimal; import java.sql.Timestamp;import java.util.List;import org.adempiere.exceptions.AdempiereException;import org.compiere.model.MMovement;import org.compiere.model.MMovementLine;import org.compiere.model.MProduct;
import org.compiere.model.Query;import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;
import org.compiere.util.Env;import org.compiere.util.TimeUtil;import org.my.model.MWM_DeliveryScheduleLine;import org.my.model.MWM_EmptyStorage;
import org.my.model.MWM_EmptyStorageLine;import org.my.model.MWM_HandlingUnit;import org.my.model.MWM_HandlingUnitHistory;import org.my.model.MWM_InOutLine;

	public class StockMovement extends SvrProcess {
	private int WM_HandlingUnit_ID = 0; 	private BigDecimal Percent = Env.ZERO; 	private BigDecimal QtyMovement = Env.ZERO;  	private int M_Locator_ID = 0; 	Timestamp now = new Timestamp (System.currentTimeMillis()); 	private int done=0; 	private boolean movement; 		protected void prepare() {
		ProcessInfoParameter[] para = getParameter();
			for (ProcessInfoParameter p:para) {
				String name = p.getParameterName();
				if (p.getParameter() == null)					;
				else if(name.equals("WM_HandlingUnit_ID")){
					WM_HandlingUnit_ID = p.getParameterAsInt();
			}
				else if(name.equals("Percent")){
					Percent = p.getParameterAsBigDecimal();
			}
				else if(name.equals("QtyMovement")){
					QtyMovement = p.getParameterAsBigDecimal();
			} 
				else if(name.equals("M_Locator_ID")){
					M_Locator_ID = p.getParameterAsInt();
			}
		}
	}
	/**	 * HandlingUnit move its content to another Locator's EmptyStorageLine	 * if No HU, then move all. If yes, part by Qty or Percent to move.	 */	protected String doIt() {		if (M_Locator_ID<1 )			throw new AdempiereException("Target Locator must be set!");				if (WM_HandlingUnit_ID>0){			if (QtyMovement.compareTo(Env.ZERO)==0 && Percent.compareTo(Env.ZERO)==0)				throw new AdempiereException("HandlingUnit has no Percent/QtyMovement");		}		//HandlingUnit to split the storage contents 		MWM_HandlingUnit hu = null;		if (WM_HandlingUnit_ID>0){			hu = new Query(Env.getCtx(),MWM_HandlingUnit.Table_Name,MWM_HandlingUnit.COLUMNNAME_WM_HandlingUnit_ID+"=?",get_TrxName())					.setParameters(WM_HandlingUnit_ID)					.first();			if (hu==null)				throw new AdempiereException("Handling Unit IS NULL not supposed to happen.");			hu.setM_Locator_ID(M_Locator_ID);		} 		MMovement move = null; //init for Material Movement at end		
		String whereClause = "EXISTS (SELECT T_Selection_ID FROM T_Selection WHERE T_Selection.AD_PInstance_ID=? AND T_Selection.T_Selection_ID=WM_EmptyStorageLine.WM_EmptyStorageLine_ID)";
  		List<MWM_EmptyStorageLine> lines = new Query(Env.getCtx(),MWM_EmptyStorageLine.Table_Name,whereClause,get_TrxName())
		.setParameters(getAD_PInstance_ID()).list();
				
		for (MWM_EmptyStorageLine line:lines){			if (QtyMovement.compareTo(line.getQtyMovement())>0)				throw new AdempiereException("QtyMovement more than StorageLine Qty.");						MWM_InOutLine ioline = new Query(Env.getCtx(),MWM_InOutLine.Table_Name,MWM_InOutLine.COLUMNNAME_WM_InOutLine_ID+"=?",get_TrxName())					.setParameters(line.getWM_InOutLine_ID())					.first();			if (ioline==null)				throw new AdempiereException("StorageLine Movement has no WMS InOut record.");						MWM_DeliveryScheduleLine dline = new Query(Env.getCtx(),MWM_DeliveryScheduleLine.Table_Name,MWM_DeliveryScheduleLine.COLUMNNAME_WM_DeliveryScheduleLine_ID+"=?",get_TrxName())					.setParameters(ioline.getWM_DeliveryScheduleLine_ID())					.first();			if (dline==null)				throw new AdempiereException("StorageLine Movement does not have associated DeliveryLine");						if (!dline.isReceived()) {				throw new AdempiereException("StorageLine is not Received in its DeliveryScheduleLine. Not done for: "+line);			}			//Product			MProduct product = (MProduct) line.getM_Product();			//source Storage			MWM_EmptyStorage source = (MWM_EmptyStorage)line.getWM_EmptyStorage();			//target Storage			MWM_EmptyStorage targetStorage = new Query(Env.getCtx(),MWM_EmptyStorage.Table_Name,MWM_EmptyStorage.COLUMNNAME_M_Locator_ID+"=?",get_TrxName())					.setParameters(M_Locator_ID)					.first();			if (targetStorage==null)				throw new AdempiereException("No EmptyStorage record for Locator_ID: "+M_Locator_ID);								BigDecimal buffer = Env.ZERO;						if (WM_HandlingUnit_ID==0){			//move completely whole StorageLine together with its Handling Unit				buffer=line.getQtyMovement();				//update the Parent EmptyStorage AvailableQtys 				source.setAvailableCapacity(source.getAvailableCapacity().subtract(line.getQtyMovement()));				source.saveEx(get_TrxName());				line.setWM_EmptyStorage_ID(targetStorage.get_ID());				line.saveEx(get_TrxName());							}else {//move partial QtyMovement								//get source HandlingUnit to affect its Qty				MWM_HandlingUnit sourceHU = new Query(Env.getCtx(),MWM_HandlingUnit.Table_Name,MWM_HandlingUnit.COLUMNNAME_WM_HandlingUnit_ID+"=?",get_TrxName())						.setParameters(line.getWM_HandlingUnit_ID())						.first();				hu.setM_Product_ID(line.getM_Product_ID());				if (line.isSOTrx())					hu.setDocStatus(MWM_HandlingUnit.STATUS_InProgress);				else					hu.setDocStatus(MWM_HandlingUnit.STATUS_Completed);								//source HU history setting				MWM_HandlingUnitHistory sourcehuh = new Query(Env.getCtx(),MWM_HandlingUnitHistory.Table_Name,MWM_HandlingUnitHistory.COLUMNNAME_WM_HandlingUnit_ID+"=? AND "						+MWM_HandlingUnitHistory.COLUMNNAME_M_Product_ID+"=? AND "+MWM_HandlingUnitHistory.COLUMNNAME_QtyMovement+"=?",get_TrxName())						.setParameters(sourceHU.get_ID(),line.getM_Product_ID(),line.getQtyMovement())						.first();				// new HU history setting				MWM_HandlingUnitHistory huh = new MWM_HandlingUnitHistory(Env.getCtx(),0,get_TrxName());				huh.setWM_HandlingUnit_ID(hu.get_ID());				huh.setDateStart(now);				huh.setM_Product_ID(line.getM_Product_ID());								//new EmptyStorageLine				MWM_EmptyStorageLine neweline = new MWM_EmptyStorageLine(Env.getCtx(), 0, get_TrxName());				neweline.setDateStart(now);				neweline.setM_Product_ID(line.getM_Product_ID());				neweline.setWM_EmptyStorage_ID(targetStorage.get_ID());				neweline.setC_UOM_ID(line.getC_UOM_ID());				neweline.setWM_InOutLine_ID(line.getWM_InOutLine_ID());				neweline.setIsSOTrx(line.isSOTrx());				neweline.setWM_HandlingUnit_ID(WM_HandlingUnit_ID);				if (product.getGuaranteeDays()>0)					neweline.setDateEnd(line.getDateEnd());								if (QtyMovement.compareTo(Env.ZERO)>0){ //by Qty 					buffer=QtyMovement;					hu.setQtyMovement(QtyMovement);							huh.setQtyMovement(QtyMovement);					neweline.setQtyMovement(QtyMovement);					sourceHU.setQtyMovement(sourceHU.getQtyMovement().subtract(QtyMovement)); 					sourcehuh.setQtyMovement(sourcehuh.getQtyMovement().subtract(QtyMovement)); 				} else 				{ //by Percent					buffer = line.getQtyMovement().divide(Env.ONEHUNDRED, 2,BigDecimal.ROUND_HALF_UP);					buffer = buffer.multiply(Percent);					hu.setQtyMovement(buffer);							huh.setQtyMovement(buffer);					neweline.setQtyMovement(buffer);					sourceHU.setQtyMovement(sourceHU.getQtyMovement().subtract(buffer)); 					sourcehuh.setQtyMovement(sourcehuh.getQtyMovement().subtract(buffer)); 				} 					neweline.saveEx(get_TrxName());				sourceHU.saveEx(get_TrxName());						sourcehuh.saveEx(get_TrxName());				hu.saveEx(get_TrxName());		  								//subtracting partially				line.setQtyMovement(line.getQtyMovement().subtract(buffer));				line.saveEx(get_TrxName());			}// -- end of partial QtyMovement						//Calculate if target Storage has sufficient space.			BigDecimal available = targetStorage.getAvailableCapacity().subtract(buffer.multiply(new BigDecimal(line.getM_Product().getUnitsPerPack())));			if (available.compareTo(Env.ZERO)<=0)				throw new AdempiereException("Target Locator has insufficient space for: "+line.getQtyMovement()+" "+line.getM_Product().getName());						targetStorage.setAvailableCapacity(available);  			calculatePercentageVacant(targetStorage);			targetStorage.saveEx(get_TrxName());						//source Storage			source.setAvailableCapacity(source.getAvailableCapacity().add(buffer.multiply(new BigDecimal(line.getM_Product().getUnitsPerPack()))));			source.saveEx(get_TrxName());						//check if core M_InOut exist, then create a Material Movement record.			if (ioline.getM_InOutLine_ID()>0 && movement==false){				move = new MMovement(Env.getCtx(),0,get_TrxName());				move.setMovementDate(now);				move.saveEx(get_TrxName());				movement=true;			}			if (ioline.getM_InOutLine_ID()>0){				MMovementLine moveline = new MMovementLine(Env.getCtx(),0,get_TrxName());				moveline.setM_Locator_ID(ioline.getM_Locator_ID());				moveline.setM_LocatorTo_ID(M_Locator_ID);				moveline.setM_Product_ID(line.getM_Product_ID());				if (WM_HandlingUnit_ID==0)					moveline.setMovementQty(line.getQtyMovement());				moveline.setMovementQty(buffer);				moveline.saveEx(get_TrxName());				move.saveEx(get_TrxName());			}			done++;
		}
		return "Lines done: "+done;

	}	private void calculatePercentageVacant(MWM_EmptyStorage empty) {//divide(b, 2, RoundingMode.HALF_UP)		empty.setPercentage((empty.getAvailableCapacity().divide(empty.getVacantCapacity(),2,BigDecimal.ROUND_HALF_UP)).multiply(Env.ONEHUNDRED));		//set is Full if 0% vacant		if (empty.getPercentage().compareTo(Env.ZERO)==0)			empty.setIsFull(true);		else			empty.setIsFull(false);		empty.saveEx(get_TrxName());	}
}
